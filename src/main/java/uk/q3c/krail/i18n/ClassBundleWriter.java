package uk.q3c.krail.i18n;

import com.google.inject.Inject;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.ClassUtils;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import uk.q3c.krail.core.user.opt.UserOption;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;

/**
 * Created by David Sowerby on 25/11/14.
 */
public class ClassBundleWriter<E extends Enum<E>> extends BundleWriterBase<E> {

    public String classJavaDoc;
    private Class<?> clazz;
    private EnumMap<E, String> entryMap;
    private List<Class<?>> imports = new ArrayList<>();
    private Class<?> keyClass;
    private String pkg;
    private Class<?> superClass;

    @Inject
    protected ClassBundleWriter(UserOption userOption) {
        super(userOption);
    }

    @Override
    public void setBundle(EnumResourceBundle<E> bundle) {
        super.setBundle(bundle);
        this.clazz = bundle.getClass();
        this.keyClass = bundle.getKeyClass();
        this.superClass = clazz.getSuperclass();
        this.entryMap = bundle.getMap();
        this.pkg = ClassUtils.getPackageCanonicalName(clazz);
        classJavaDoc = "Generated by Krail " + DateTime.now()
                                                       .toString(DateTimeFormat.longDateTime());
    }

    @Override
    public void write() throws IOException {
        StringBuilder buf = new StringBuilder();
        buf.append("package ")
           .append(pkg)
           .append(";\n\n");

        String indent = "    ";
        String indent2 = indent + indent;

        List<Class<?>> imps = imports;
        for (Class<?> clazz : imps) {
            buf.append("import ")
               .append(clazz.getName())
               .append(";\n");
        }
        buf.append("\n");

        buf.append("/**\n* ")
           .append(classJavaDoc)
           .append("\n*\n*/\n");

        buf.append("public class ")
           .append(clazz.getSimpleName())
           .append(" extends ")
           .append(genericSupperClass())
           .append(" {\n\n");

        buf.append(indent)
           .append("@Override\n");
        buf.append(indent)
           .append("protected void loadMap() {\n");

        for (Map.Entry<E, String> entry : entryMap.entrySet()) {
            buf.append(indent2)
               .append("put(")
               .append(entry.getKey()
                            .getClass()
                            .getSimpleName())
               .append(".")
               .append(entry.getKey()
                            .name())
               .append(", ")
               .append(entry.getValue())
               .append(");\n");
        }
        buf.append(indent)
           .append("}\n");
        buf.append("}\n");
        File file = new File(getWritePath(), clazz.getSimpleName() + ".java");
        FileUtils.writeStringToFile(file, buf.toString());
    }

    private String genericSupperClass() {
        if (superClass.equals(EnumResourceBundle.class)) {
            return superClass.getSimpleName() + "<" + keyClass.getSimpleName() + ">";
        }
        return superClass.getSimpleName();

    }

}
