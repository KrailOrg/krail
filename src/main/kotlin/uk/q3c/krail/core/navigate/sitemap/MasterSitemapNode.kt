/*
 *
 *  * Copyright (c) 2016. David Sowerby
 *  *
 *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 *  * the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 *  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  * specific language governing permissions and limitations under the License.
 *
 */
package uk.q3c.krail.core.navigate.sitemap

import com.google.common.collect.ImmutableList
import uk.q3c.krail.core.i18n.LabelKey
import uk.q3c.krail.core.navigate.Navigator
import uk.q3c.krail.core.shiro.PageAccessControl
import uk.q3c.krail.core.view.EmptyViewConfiguration
import uk.q3c.krail.core.view.KrailView
import uk.q3c.krail.core.view.ViewConfiguration
import uk.q3c.krail.i18n.I18NKey
import javax.annotation.concurrent.Immutable

/**
 * Represents a node in the site map (equivalent to a web site 'route') and represents a 'page' to the user.
 * At a minimum, it contains a URI segment and an id generated by the [MasterSitemap].
 *
 *
 * The uri segment this is just one part of the URI, so the node for the page at /private/account/open would contain just 'open'). To obtain the full URI,
 * use [MasterSitemap.uri].
 *
 *
 * [viewClass] is the class of [KrailView] to be used in displaying the page, and the [labelKey] is an [I18NKey] key used to
 * provide a localised label for the page
 *
 *
 * The [id] is required because the URI segment alone may not be unique, and the other elements are optional.  For the node to be used in a graph, it
 * needs a unique identifier. The id is provided by [MasterSitemap.addChild]  and [MasterSitemap.addNode].
 * This field has an additional purpose in providing a record of insertion order, so that nodes can be sorted by insertion order if required - although this
 * is not a particularly reliable method of determining order, so it is recommended to use the [positionIndex] if you want to determine position by index
 * rather than by alphabetic sorting
 *
 *
 * The type of user access control applied to the page is determined by [pageAccessControl]. Note that permissions and roles are mutually exclusive,
 * so a page cannot require both roles and permissions. This control is applied by the [Navigator] during page changes, thereby disallowing access to
 * an unauthorised page.
 *
 * Migrated to Kotlin 10 Jun 2018
 * @author David Sowerby 6 May 2013
 */
@Immutable
data class MasterSitemapNode @JvmOverloads constructor(override val id: Int,
                                                       override val uriSegment: String,
                                                       override val labelKey: I18NKey = LabelKey.Unnamed,
                                                       override val pageAccessControl: PageAccessControl = PageAccessControl.PERMISSION,
                                                       override val positionIndex: Int = -1,
                                                       override val viewClass: Class<out KrailView> = EmptyView::class.java,
                                                       override val viewConfiguration: Class<out ViewConfiguration> = EmptyViewConfiguration::class.java,
                                                       override val roles: ImmutableList<String> = ImmutableList.of())


    : SitemapNode {

    constructor(id: Int, nodeRecord: NodeRecord) :

            this(id = id,
                    uriSegment = nodeRecord.uriSegment,
                    labelKey = nodeRecord.labelKey,
                    pageAccessControl = nodeRecord.pageAccessControl,
                    positionIndex = nodeRecord.positionIndex,
                    viewClass = nodeRecord.viewClass,
                    viewConfiguration = nodeRecord.configuration,
                    roles = ImmutableList.copyOf(nodeRecord.roles))


    val isPublicPage: Boolean
        get() = pageAccessControl == PageAccessControl.PUBLIC


//     fun toStringAsMapEntry(): String {
//        val buf = StringBuilder()
//        buf.append(uriSegment ?: "no segment given")
//        buf.append(if (viewClass == null) "" else "\t\t:  " + viewClass.simpleName)
//        buf.append(if (labelKey == null) "" else "\t~  " + (labelKey as Enum<*>).name)
//        return buf.toString()
//
//    }

//    override fun toString(): String {
//        val buf = StringBuilder()
//        buf.append("id=")
//        buf.append(Integer.toString(id))
//        buf.append(", segment=")
//        buf.append(uriSegment ?: "null")
//        buf.append(", viewClass=")
//        buf.append(if (viewClass == null) "null" else viewClass.name)
//        buf.append(", labelKey=")
//        buf.append(if (labelKey == null) "null" else (labelKey as Enum<*>).name)
//        buf.append(", roles=")
//        if (roles.isEmpty()) {
//            buf.append("none")
//        } else {
//            var first = true
//            for (role in roles) {
//                if (!first) {
//                    buf.append(';')
//                }
//                buf.append('[')
//                buf.append(role)
//                buf.append(']')
//                first = false
//            }
//        }
//        return buf.toString()
//    }

    fun hasRoles(): Boolean {
        return !roles.isEmpty()
    }


    /**
     * Returns a copy of this node, with the `pageAccessControl modified`
     *
     * @param pageAccessControl
     *
     * @return modified copy of this node
     */
    @Deprecated(message = "use copy()", replaceWith = ReplaceWith("this.copy(pageAccessControl = pageAccessControl)"))
    fun modifyPageAccessControl(pageAccessControl: PageAccessControl): MasterSitemapNode {
        return this.copy(pageAccessControl = pageAccessControl)
    }

    /**
     * Returns a copy of this node with the `viewClass` modified
     *
     * @param viewClass
     *
     * @return modified copy of this node
     */
    @Deprecated(message = "use copy()", replaceWith = ReplaceWith("this.copy(viewClass = viewClass)"))
    fun modifyView(viewClass: Class<out KrailView>): MasterSitemapNode {
        return this.copy(viewClass = viewClass)
    }

    /**
     * Returns a copy of this node with the `labelKey` modified
     *
     * @param labelKey
     *
     * @return modified copy of this node
     */
    @Deprecated(message = "use copy()", replaceWith = ReplaceWith("this.copy(labelKey = labelKey)"))
    fun modifyLabelKey(labelKey: I18NKey): MasterSitemapNode {
        return copy(labelKey = labelKey)
    }

    /**
     * Hashcode and equals are normally generated automatically in a Kotlin data class, but these are needed toensure that the graph used by [Sitemap] correctly identifies nodes
     */

    override fun equals(o: Any?): Boolean {
        if (this === o) {
            return true
        }
        if (o !is MasterSitemapNode) {
            return false
        }

        val that = o as MasterSitemapNode?

        return id == that!!.id

    }


    override fun hashCode(): Int {
        return id
    }
}
