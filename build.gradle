/*
 *
 *  * Copyright (c) 2016. David Sowerby
 *  *
 *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 *  * the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 *  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  * specific language governing permissions and limitations under the License.
 *
 */

//apply plugin: 'war' // needed only for providedCompile

description = 'A rapid development framework for web apps using Vaadin, Guice, Shiro et al'

ext.assertjVersion = '3.3.0'
ext.guavaVersion = '19.0'
ext.shiroVersion = '1.2.4'
ext.guiceVersion = '4.0'
ext.vaadinVersion = '7.6.1'
ext.commonsLangVersion = '3.3.2'
ext.groovyVersion = '2.4.1'
ext.slf4jVersion = '1.7.6'
ext.q3ctestUtilVersion='0.7.10'


version = '0.9.8'
group = 'uk.q3c.krail'

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'project-report'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'


sourceCompatibility = '1.8'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url 'http://maven.vaadin.com/vaadin-addons'
    }
}

dependencies {

    //Dependency Injection
    compile 'com.google.inject.extensions:guice-servlet:' + guiceVersion
    compile 'com.google.inject.extensions:guice-assistedinject:' + guiceVersion
    compile 'com.google.inject.extensions:guice-multibindings:' + guiceVersion

    //groovy
    compile 'org.codehaus.groovy:groovy-all:' + groovyVersion

//event bus
    compile 'net.engio:mbassador:1.2.1'

    //logging
    compile 'org.slf4j:slf4j-api:' + slf4jVersion
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'ch.qos.logback:logback-core:1.1.2'

    //servlet // switching to providedCompile broke mock for VaadinSession
    compile "javax.servlet:javax.servlet-api:3.+"

    //Utility
    //the easiest way to all the Jung parts
    compile 'net.sf.jung:jung-samples:2.0.1'
    compile 'org.apache.commons:commons-lang3:' + commonsLangVersion
    compile 'commons-io:commons-io:2.4'
    compile 'commons-configuration:commons-configuration:1.10'
    compile 'org.reflections:reflections:0.9.10'
    compile 'net.jodah:typetools:0.4.3'

    //Validation
    compile 'org.apache.bval:bval-jsr303:0.5'
    compile 'org.apache.bval:bval-guice:0.5'
    compile 'javax.validation:validation-api:1.0.0.GA'

    //User access control
    compile 'org.apache.shiro:shiro-core:' + shiroVersion
    compile 'org.apache.shiro:shiro-web:' + shiroVersion
    compile 'org.apache.shiro:shiro-guice:' + shiroVersion

    //Vaadin

    //The core server part of Vaadin -->
    compile 'com.vaadin:vaadin-server:' + vaadinVersion
    compile 'com.vaadin:vaadin-push:' + vaadinVersion

    //Testing
    compile 'com.google.code.findbugs:annotations:3.0.0'
    testCompile 'org.eclipse.persistence:javax.persistence:2.1.0'
    testCompile 'com.mycila:mycila-guice:2.10.ga'
    testCompile 'com.mycila.testing.plugins:mycila-testing-guice:2.8'
    testCompile 'com.mycila.testing.plugins:mycila-testing-mockito:2.8'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:' + assertjVersion
    testCompile 'org.assertj:assertj-guava:1.3.1'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.spockframework:spock-guice:1.0-groovy-2.4'
    testCompile 'cglib:cglib-nodep:2.2.2'
    testCompile 'uk.q3c:q3c-testUtil:'+q3ctestUtilVersion
//    testCompile "javax.servlet:javax.servlet-api:3.+"

    //included in compile to enable the production of test utils
    compile 'com.mycila.testing.plugins:mycila-testing-mockito:2.8'
    compile 'org.mockito:mockito-all:1.10.19'
}

//bintray {
//   dryRun = false
//}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

publishing {
    publications {
        mavenStuff(MavenPublication) {
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

javadoc {
    failOnError = false
}
